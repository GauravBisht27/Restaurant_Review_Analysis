# -*- coding: utf-8 -*-
"""Streamlit_Restaurant_Reviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dEwFCfXy12h0sThYTGwnv5bODLNvneB7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_table("/content/Restaurant_Reviews.tsv")
df

df.info()

df.describe()

df.isnull().sum()

count = 0
for i in df['Review']:
  df.iloc[count,0] = i.lower()
  count+=1
df

df.iloc[:,1] = df.iloc[:,1].replace([0,1],["Negative","Positive"])

df

df['Liked'].value_counts()

sns.countplot(df['Liked'])

x = df['Review']
y = df['Liked']

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=0,test_size=0.20,train_size=0.80)

x_train

y_train

"""Using SVC and COUNT VECTORIZER"""

from sklearn.feature_extraction.text import CountVectorizer
vect = CountVectorizer()

x_train_vect = vect.fit_transform(x_train)
x_test_vect = vect.transform(x_test)
x_train_vect

from sklearn.svm import SVC
model1 = SVC()

model1.fit(x_train_vect,y_train)

y_pred1 = model1.predict(x_test_vect)
y_pred1

from sklearn.metrics import accuracy_score, confusion_matrix

confusion_matrix(y_test,y_pred1)

ac1 = accuracy_score(y_test,y_pred1)
ac1

model1.score(x_test_vect,y_test)

"""SVC with PIPELINE"""

from sklearn.pipeline import make_pipeline

model2 = make_pipeline(CountVectorizer(),SVC())

model2.fit(x_train,y_train)

y_pred2 = model2.predict(x_test)
y_pred2

confusion_matrix(y_test,y_pred2)

ac2 = accuracy_score(y_test,y_pred2)
ac2

model2.score(x_test,y_test)

"""SELECTING MODEL WITH HIGHEST ACCURACY AS FINAL MODEL AND CREATE A JOBLIB FILE"""

import joblib

joblib.dump(model2,'Restaurant_Review_Analysis_SVC')

reloaded_model1 = joblib.load('Restaurant_Review_Analysis_SVC')
reloaded_model1

reloaded_model1.score(x_test,y_test)

reloaded_model1.predict(["Food was very good"])

reloaded_model1.predict(["Did not like the taste"])

"""NAIVE BAYES AND COUNT VECTORIZER"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=0,test_size=0.20,train_size=0.80)

x_train

y_train

from sklearn.feature_extraction.text import CountVectorizer
vect = CountVectorizer()

x_train_vect = vect.fit_transform(x_train)
x_test_vect = vect.transform(x_test)
x_train_vect

from sklearn.naive_bayes import MultinomialNB

model3 = MultinomialNB()

model3.fit(x_train_vect,y_train)

y_pred3 = model3.predict(x_test_vect)
y_pred3

from sklearn.metrics import accuracy_score, confusion_matrix

confusion_matrix(y_test,y_pred3)

ac3 = accuracy_score(y_test,y_pred3)
ac3

model3.score(x_test_vect,y_test)

"""NAIVE BAYES WITH PIPELINING"""

from sklearn.pipeline import make_pipeline

model4 = make_pipeline(CountVectorizer(),MultinomialNB())

model4.fit(x_train,y_train)

y_pred4 = model4.predict(x_test)
y_pred4

confusion_matrix(y_test,y_pred4)

ac4 = accuracy_score(y_test,y_pred4)

model4.score(x_test,y_test)

"""SELECTING MODEL WITH HIGHEST ACCURACY AS FINAL MODEL AND CREATE A JOBLIB FILE"""

import joblib

joblib.dump(model4,'Restaurant_Review_Analysis_NB')

reloaded_model2 = joblib.load('Restaurant_Review_Analysis_NB')
reloaded_model2

reloaded_model2.score(x_test,y_test)

reloaded_model2.predict(['wow what an good restaurant'])

reloaded_model2.predict(['tastes horrible and place is also not well maintained'])

"""STREAMLIT DEPLOYMENT"""

!pip install -q streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile review_app.py
# import streamlit as st
# import joblib
# 
# reloaded_model1 = joblib.load('Restaurant_Review_Analysis_SVC')
# reloaded_model2 = joblib.load('Restaurant_Review_Analysis_NB')
# 
# st.title("      RESTAURANT REVIEW ANALYSIS      ")
# st.header("The model with highest accuracy is :")
# st.write(reloaded_model2)
# 
# # Enter the user review
# review = st.text_input("Enter your review of the restaurant: ")
# 
# if not review:
#   st.warning("Please Enter a review")
#   st.stop()
# st.success("Thank you for giving your review.")
# 
# #Predict output on basis of input
# output = reloaded_model2.predict([review])
# 
# # If the predict button is pressed it gives the output in webapp
# if st.button("Predict"):
#     st.title(output[0])

#Run the streamlit webapp
!streamlit run review_app.py & npx localtunnel --port 8501